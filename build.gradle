import java.nio.file.Files

plugins {
    id 'java'
    id "xyz.jpenilla.run-paper" version "2.3.1"
    id 'net.kyori.indra.git' version "3.1.3"
    id 'com.gradleup.shadow' version '8.3.5'
    id "io.freefair.lombok" version "8.11"
}

group = 'cc.happyareabean'
version = '1.1.9'

def gitCommit = indraGit.commit().abbreviate(7).name()
def fullVersion = "${project.version}-${gitCommit}"

java {
    sourceCompatibility = JavaLanguageVersion.of(8)
    targetCompatibility = JavaLanguageVersion.of(8)
}

compileJava {
    options.compilerArgs += ["-parameters"]
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()

    //Added spigot repository
    maven {
        name = 'Spigot'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }

    //Added md5's repository to add the missing BungeeCord-Chat api
    maven {
        name = 'BungeeCord-Chat'
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }

    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }

    maven {
        name = "sonatype-oss-snapshots1"
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    }

    maven {
        url = "https://repo.fantasyrealms.net/releases"
    }

    maven {
        url = "https://repo.fantasyrealms.net/other-snapshots"
    }

    maven {
        name = "fantasyrealmsDowngraded"
        url = uri("https://repo.fantasyrealms.net/downgraded")
    }

    maven { url = 'https://jitpack.io' }

    //Add your repositories here
    mavenLocal()
}

ext {
    //Define one of the supported mc versions
    mcVersion = '1.20.1'
}

dependencies {
    //Adds the spigot api to your plugin
    compileOnly "io.papermc.paper.downgraded:paper-api:1.21.6-R0.1-SNAPSHOT"

    compileOnly 'me.clip:placeholderapi:2.11.6'

    implementation "net.kyori:adventure-api:4.23.0"
    implementation "net.kyori:adventure-text-minimessage:4.23.0"
    implementation "net.kyori:adventure-platform-bukkit:4.4.0"

    implementation 'com.github.HappyAreaBean.Spiget-Update:bukkit:1.4.7-SNAPSHOT'
    implementation "com.squareup.okhttp3:okhttp:4.12.0"

    implementation 'io.github.revxrsal:lamp.common:4.0.0-beta.24'
    implementation 'io.github.revxrsal:lamp.bukkit:4.0.0-beta.24'
    implementation 'io.github.revxrsal:lamp.brigadier:4.0.0-beta.24'

    implementation("com.github.HappyAreaBean.ConfigLib:configlib-bukkit:v2.3.1")

    implementation 'org.bstats:bstats-bukkit:3.0.2'

}

processResources {
    if (project.version.toString().endsWith("-SNAPSHOT"))
        version = fullVersion

    project.properties.put("pluginVersion", project.version)
    expand project.properties
}

def SERV_DIR = System.getenv('SERV_DIR') != null ? System.getenv('SERV_DIR') : "${project.rootProject.projectDir}/working"
def SERV_JAR = System.getenv('SERV_JAR') != null ? System.getenv('SERV_JAR') : null
def SERV_VER = System.getenv('SERV_VER') != null ? System.getenv('SERV_VER') : mcVersion

def libsPackage = group + ".sjm.libs"

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion(SERV_VER)
        if (SERV_JAR != null)
            serverJar(runDirectory.file(SERV_JAR as String))
        runDirectory.set(file(SERV_DIR))
    }
    shadowJar {
        archiveClassifier.set('')

        relocate("revxrsal.commands", "${libsPackage}.lamp")
        relocate("org.bstats", "${libsPackage}.bstats")
        relocate("org.inventivetalent.update.spiget", "${libsPackage}.spigetupdater")
        relocate("de.exlll.configlib", "${libsPackage}.configlib")
        relocate("org.yaml.snakeyaml", "${libsPackage}.snakeyaml")
        relocate("net.kyori", "${libsPackage}.kyori")

        relocate("okio", "${libsPackage}.okio")
        relocate("okhttp3", "${libsPackage}.okhttp3")
        relocate("org.intellij", "${libsPackage}.intellij")
        relocate("org.jetbrains.annotations", "${libsPackage}.annotations")
        relocate("kotlin", "${libsPackage}.kotlin")
    }
}

int SERV_JAVA = System.getenv("SERV_JAVA") == null ? 21 : System.getenv("SERV_JAVA") as int

tasks.withType(xyz.jpenilla.runtask.task.AbstractRun) {
    javaLauncher = javaToolchains.launcherFor {
        vendor = JvmVendorSpec.JETBRAINS
        languageVersion = JavaLanguageVersion.of(SERV_JAVA)
    }
    jvmArgs "-XX:+AllowEnhancedClassRedefinition"
}

abstract class PrintSnapshotVersionTask extends DefaultTask {
    @Input String projectVersion
    @Input String buildDirectory

    // Constructor to set the project version
    PrintSnapshotVersionTask() {
        this.projectVersion = project.version.toString()
        this.buildDirectory = project.layout.buildDirectory.get().asFile.toString()
    }

    @TaskAction
    def print() {
        File versionsDir = new File(buildDirectory, "versions")
        File textFile = new File(versionsDir, "snapshot.txt")
        versionsDir.mkdirs()
        Files.deleteIfExists(textFile.toPath())
        textFile.createNewFile()
        textFile.text = projectVersion // Use the stored project version
    }
}

tasks.register('snapshotVersion', PrintSnapshotVersionTask)
