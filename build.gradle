import java.nio.file.Files

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'kr.entree.spigradle' version '2.4.2'
    id 'java'
    id "xyz.jpenilla.run-paper" version "2.1.0"
    id 'net.kyori.indra.git' version "3.1.3"
}

group 'cc.happyareabean'
version '1.1.5'

def gitCommit = indraGit.commit().abbreviate(7).name()
def fullVersion = "${project.version}-${gitCommit}"

sourceCompatibility = JavaLanguageVersion.of(8)
targetCompatibility = JavaLanguageVersion.of(8)

compileJava.options.encoding = 'UTF-8'

archivesBaseName = rootProject.name

repositories {
    mavenCentral()

    //Added spigot repository
    maven {
        name = 'Spigot'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }

    //Added md5's repository to add the missing BungeeCord-Chat api
    maven {
        name = 'BungeeCord-Chat'
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }

    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }

    maven {
        name = "sonatype-oss-snapshots1"
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    }

    maven {
        url = "https://repo.fantasyrealms.net/releases"
    }

    maven {
        url = "https://repo.fantasyrealms.net/other-snapshots"
    }

    maven { url 'https://jitpack.io' }

    //Add your repositories here
    mavenLocal()
}

ext {
    //Define one of the supported mc versions
    mcVersion = '1.20.1'
}

dependencies {
    //Adds the spigot api to your plugin
    compileOnly "org.spigotmc:spigot-api:${mcVersion}-R0.1-SNAPSHOT"

    //Add your dependencies here
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    compileOnly 'me.clip:placeholderapi:2.11.1'

    implementation "net.kyori:adventure-api:4.15.0"
    implementation "net.kyori:adventure-text-minimessage:4.15.0"
    implementation "net.kyori:adventure-platform-bukkit:4.3.2"

    implementation 'cc.happyareabean.spiget-update:bukkit:1.4.7-SNAPSHOT'
    implementation "com.squareup.okhttp3:okhttp:4.10.0"

    implementation 'com.github.Revxrsal.Lamp:bukkit:3.1.8'
    implementation 'com.github.Revxrsal.Lamp:common:3.1.8'

    implementation("de.exlll:configlib-core:2.3.0")

    implementation 'org.bstats:bstats-bukkit:3.0.0'

}

spigot {
    // The 'name' and 'version' will be set to project.version and project.name,
    // But we may set those manually.
    version = project.version.toString().endsWith("-SNAPSHOT") ? fullVersion : project.version
    apiVersion '1.13'
    excludeLibraries = ['*']
    softDepends 'PlaceholderAPI'
    authors 'HappyAreaBean'
    permissions {
        'sjm.admin' {
            description = 'Allows to use SimpleJoinMessage commands.'
            defaults = 'op'
        }
    }
}

processResources {
    project.properties.put("version", this.version)
    expand project.properties
}

def runDirectoryDir = project.hasProperty('runPaper.runDirectory') ? project.getProperty('runPaper.runDirectory') : "${project.rootProject.projectDir}/working"
def runServerJar = project.hasProperty('runPaper.serverJar') ? project.getProperty('runPaper.serverJar') : null

def libsPackage = group + ".sjm.libs"

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion(mcVersion)
        if (runServerJar != null)
            serverJar(runDirectory.file(runServerJar as String))
        runDirectory.set(file(runDirectoryDir))
    }
    shadowJar {
        archiveClassifier.set('')

        relocate("revxrsal.commands", "${libsPackage}.lamp")
        relocate("org.bstats", "${libsPackage}.bstats")
        relocate("org.inventivetalent.update.spiget", "${libsPackage}.spigetupdater")
        relocate("de.exlll.configlib", "${libsPackage}.configlib")
        relocate("org.yaml.snakeyaml", "${libsPackage}.snakeyaml")
        relocate("net.kyori", "${libsPackage}.kyori")

        relocate("okio", "${libsPackage}.okio")
        relocate("okhttp3", "${libsPackage}.okhttp3")
        relocate("org.intellij", "${libsPackage}.intellij")
        relocate("org.jetbrains.annotations", "${libsPackage}.annotations")
        relocate("kotlin", "${libsPackage}.kotlin")
    }
}

abstract class PrintSnapshotVersionTask extends DefaultTask {
    @TaskAction
    def print() {
        File versionsDir = project.file("$project.buildDir/versions")
        File textFile = project.file("$project.buildDir/versions/snapshot.txt")
        versionsDir.mkdirs()
        Files.deleteIfExists(textFile.toPath())
        textFile.createNewFile()
        textFile << "$project.version"
    }
}

tasks.register('snapshotVersion', PrintSnapshotVersionTask)
